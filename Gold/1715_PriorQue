#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>

void Build_minHeap(int* arr, int heap_size);									// 최소힙 생성
void Min_downheap(int* arr, int index, int heap_size);							// 하향식으로 힙 속성 복구

int main(void)
{
	int* card;																	// 힙 배열을 가리킬 포인터 선언
	int card_total, card_sum;													// 총 카드 개수와 카드의 합 
	card_sum = 0;																// 카드의 합 0으로 초기화
		
	scanf("%d", &card_total);													// 총 카드 개수 입력
	card = (int*)malloc(sizeof(int) * (card_total + 1));						// 카드 개수 + 1 크기로 동적 메모리 할당
	
	for (int i = 1; i <= card_total; i++)										// 배열의 모든 인덱스 순회하며, 카드 값 입력
	{
		scanf("%d", &card[i]);
	}

	Build_minHeap(card, card_total);											// 최소힙으로 정렬

	while (card_total > 1)														// 카드가 하나 남을 때까지 반복
	{
		card_sum += card[1];													// 가장 작은 카드 값 더함

		if (card_total == 2 || (card_total > 2 && card[2] < card[3]))			// 그 다음 작은 카드를 찾아서 더하고, 다시 힙 속성 복구
		{
			card_sum += card[2];
			card[1] = card[1] + card[2];
			card[2] = card[card_total--];
			Min_downheap(card, 2, card_total);
		}
		else
		{
			card_sum += card[3];
			card[1] = card[1] + card[3];
			card[3] = card[card_total--];
			Min_downheap(card, 3, card_total);
		}


		Min_downheap(card, 1, card_total);
	}

	printf("%d", card_sum);														// 카드 합 출력

	return 0;
}

void Build_minHeap(int* arr, int heap_size)
{
	for (int i = heap_size / 2; i > 0; i--)
	{
		Min_downheap(arr, i, heap_size);
	}
}
void Min_downheap(int* arr, int index, int heap_size)
{
	int curr = index;
	int data = arr[index];
	int left, right, child;
	while (1)
	{
		left = curr * 2;
		right = curr * 2 + 1;
		if (left > heap_size)
		{
			break;
		}
		child = left;
		if (right <= heap_size && arr[right] < arr[child])
		{
			child = right;
		}
		if (data < arr[child])
		{
			break;
		}
		arr[curr] = arr[child];
		curr = child;
	}

	arr[curr] = data;
}
